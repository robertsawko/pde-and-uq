import numpy as np
from kl_expansion import kl_covariance
from numpy.testing import assert_almost_equal
from kl_expansion import kl_expansion_fourier_projected
from kl_expansion import kl_expansion

"""
Unit tests for Karhunen-Loeve eigenfunction and eigenvalue decomposition.

Based on figures 2.2-2.5 from

Ghanem, R. and Spanos, P. "Stochastic Finite Elements: A Spectral Approach",
1991 Springer, pp 29-33

K(x, y) = exp(-c|x-y|)
"""


def test_covariance():
    a = 0.5
    c = 1
    x = np.linspace(-a, a, 100)
    x1, x2, Kapprox = kl_covariance(x=x, m=10, a=a)
    K = np.exp(-c * np.abs(x1-x2))
    relative_error = (np.abs(K - Kapprox) / K).flatten()
    # This means less than 0.1% error
    assert_almost_equal(np.max(relative_error), 0, decimal=1)


def test_fourier_projection():
    m = 95
    # Generated by np.random.randn(m) once for repeatability.
    eta = np.array([
        -1.72579025, -0.34594984,  0.21278094, -0.52604552,  0.16514009,
        -0.02476825, -0.59752513,  0.95820159, -0.83964775, -0.15448601,
        0.62275094, -0.19306779,  1.22390342,  0.5512454,  0.18395031,
        -0.54197422, -0.78262824, -0.43174626,  1.13306468, -0.8630767,
        -0.66391622, -0.8390483,  0.21641855,  1.87238957, -0.10727361,
        1.05549638,  0.72076534, -1.13922945,  1.31630356, -1.58998864,
        -1.02233787, -0.03984012,  2.18647494, -0.15465995,  0.89986041,
        -0.41115938,  0.31703175, -0.18442988,  0.53027391,  0.78013094,
        1.20771356,  0.02988133,  2.45599303,  0.34630805, -0.10419318,
        -0.21632813, -0.23220964, -0.03824053, -0.80993076, -0.23150832,
        -0.78635225,  1.17976631,  0.06753587,  0.56066958,  0.50345351,
        0.67362474, -0.52465036,  0.79317467, -0.90109944,  1.27152729,
        0.12317687, -2.47624132,  0.17661252,  0.86164725,  1.08261626,
        0.61149465,  0.7313997,  0.67164604, -1.05257519,  0.65591186,
        0.72736844, -1.49856679,  0.77260425,  1.30756778,  0.35619013,
        -0.20506108, -0.07131291,  1.05214036,  0.95328487, -1.21620252,
        -0.64078778,  2.70243663,  0.46328782,  0.12997993,  1.26070055,
        -1.27352305, -0.08555411, -0.38905446, -0.13739523, -0.20208488,
        0.4410298, -0.66402341, -1.00344754,  1.42237105, -0.45890161])
    a = np.pi
    x = np.linspace(-a, a, 100)
    f1 = kl_expansion(x, m=m, a=a, c=1/0.01, eta=eta)
    f2 = kl_expansion_fourier_projected(x, m=m, n=50, a=a, c=1/0.01, eta=eta)
    # Error is ||f_1 - f_2|| = \sqrt(\int (f1 - f2)**2 dx)
    relative_error = np.sqrt(((f1 - f2)**2).flatten()[0:-1] * np.diff(x))
    assert_almost_equal(np.mean(relative_error), 0, decimal=1)
